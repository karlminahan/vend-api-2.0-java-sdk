/*
 * API 2.0
 * Early release of version 2.0 of the Vend API.
 *
 * OpenAPI spec version: 2.0
 * Contact: api@vendhq.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.vendhq.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vendhq.models.PaymentTypeConfig;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;

/**
 * PaymentType
 */

public class PaymentType {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("type_id")
  private Integer typeId = null;

  @JsonProperty("config")
  private PaymentTypeConfig config = null;

  @JsonProperty("version")
  private BigDecimal version = null;

  public PaymentType id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Auto-generated object ID.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Auto-generated object ID.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PaymentType name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the payment type.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of the payment type.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PaymentType typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

   /**
   * The ID of the global Vend payment type. It shouldn&#39;t be used to identify the payment type - there may be multiple payment types with the same &#x60;type_id&#x60;.
   * @return typeId
  **/
  @ApiModelProperty(required = true, value = "The ID of the global Vend payment type. It shouldn't be used to identify the payment type - there may be multiple payment types with the same `type_id`.")
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }

  public PaymentType config(PaymentTypeConfig config) {
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @ApiModelProperty(value = "")
  public PaymentTypeConfig getConfig() {
    return config;
  }

  public void setConfig(PaymentTypeConfig config) {
    this.config = config;
  }

  public PaymentType version(BigDecimal version) {
    this.version = version;
    return this;
  }

   /**
   * Auto
   * @return version
  **/
  @ApiModelProperty(required = true, value = "Auto")
  public BigDecimal getVersion() {
    return version;
  }

  public void setVersion(BigDecimal version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentType paymentType = (PaymentType) o;
    return Objects.equals(this.id, paymentType.id) &&
        Objects.equals(this.name, paymentType.name) &&
        Objects.equals(this.typeId, paymentType.typeId) &&
        Objects.equals(this.config, paymentType.config) &&
        Objects.equals(this.version, paymentType.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, typeId, config, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentType {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

